name: Compilar Entities
on:
  push:
    branches:
      - "main"
      - "test"
      - "dev"
jobs:
  build:
    runs-on: 'ubuntu-latest'
    env:
      solution: Entities
      version: 1.0.${{ github.run_number }}
      versionSuffix: ${{ github.ref_name }}
    steps:
    - name: Descarga del código
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Cache de paquetes SonarCloud
      uses: actions/cache@v3
      with:
        path: ~/sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache de scanner SonarCloud
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    
    - name: Instalar scanner SonarCloud
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: 'dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner'
      
    - name: Inicializar SonarQube
      run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"Inglesefe_Entities" /o:"inglesefe" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml

    - name: Compilar la solución
      run: dotnet build ${{ env.solution }}.sln -c Debug

    - name: Ejecutar pruebas unitarias
      run: |
        dotnet tool install --global dotnet-coverage
        dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"

    - name: Finalizar SonarQube
      run: |
        sudo update-java-alternatives --set %JAVA_HOME_17_X64%
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Crear el paquete Nuget
      if: ${{ github.ref_name == 'dev' || github.ref_name == 'test' }}
      run: dotnet pack -c Release -p:PackageVersion=${{ env.version }}-${{ env.versionSuffix }} ${{ env.solution }}.sln

    - name: Crear el paquete Nuget
      if: ${{ github.ref_name == 'main' }}
      run: dotnet pack -c Release -p:PackageVersion=${{ env.version }} ${{ env.solution }}.sln

    - name: Construir artefacto
      if: ${{ github.ref_name == 'dev' || github.ref_name == 'test' }}
      run: dotnet nuget push ${{ env.solution }}/bin/Release/${{ env.solution }}.${{ env.version }}-${{ env.versionSuffix }}.nupkg  --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/inglesefe/index.json"

    - name: Construir artefacto
      if: ${{ github.ref_name == 'main' }}
      run: dotnet nuget push ${{ env.solution }}/bin/Release/${{ env.solution }}.${{ env.version }}.nupkg  --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/inglesefe/index.json"
